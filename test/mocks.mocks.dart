// Mocks generated by Mockito 5.4.5 from annotations
// in fxtm/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i8;

import 'package:flutter/material.dart' as _i10;
import 'package:flutter/services.dart' as _i9;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:fxtm/features/forex/models/forex_model.dart' as _i5;
import 'package:fxtm/features/forex/models/forex_symbol.dart' as _i4;
import 'package:fxtm/features/forex/models/trade_model.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

import 'widget_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.NotifierProviderRef<T> {
  _FakeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncNotifierProviderRef_1<T> extends _i1.SmartFake
    implements _i2.AsyncNotifierProviderRef<T> {
  _FakeAsyncNotifierProviderRef_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncValue_2<T> extends _i1.SmartFake implements _i2.AsyncValue<T> {
  _FakeAsyncValue_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MockForexSymbolNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockForexSymbolNotifier extends _i1.Mock
    implements _i3.MockForexSymbolNotifier {
  MockMockForexSymbolNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotifierProviderRef<List<_i4.ForexSymbol>> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeNotifierProviderRef_0<List<_i4.ForexSymbol>>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.NotifierProviderRef<List<_i4.ForexSymbol>>);

  @override
  List<_i4.ForexSymbol> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: <_i4.ForexSymbol>[],
      ) as List<_i4.ForexSymbol>);

  @override
  set state(List<_i4.ForexSymbol>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i4.ForexSymbol> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: <_i4.ForexSymbol>[],
      ) as List<_i4.ForexSymbol>);

  @override
  void listenSelf(
    void Function(
      List<_i4.ForexSymbol>?,
      List<_i4.ForexSymbol>,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    List<_i4.ForexSymbol>? previous,
    List<_i4.ForexSymbol>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [MockForexPriceNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockForexPriceNotifier extends _i1.Mock
    implements _i3.MockForexPriceNotifier {
  MockMockForexPriceNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AsyncNotifierProviderRef<Map<String, _i5.ForexModel>> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue:
            _FakeAsyncNotifierProviderRef_1<Map<String, _i5.ForexModel>>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AsyncNotifierProviderRef<Map<String, _i5.ForexModel>>);

  @override
  _i2.AsyncValue<Map<String, _i5.ForexModel>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_2<Map<String, _i5.ForexModel>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AsyncValue<Map<String, _i5.ForexModel>>);

  @override
  set state(_i2.AsyncValue<Map<String, _i5.ForexModel>>? newState) =>
      super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<Map<String, _i5.ForexModel>> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i6.Future<Map<String, _i5.ForexModel>>.value(
            <String, _i5.ForexModel>{}),
      ) as _i6.Future<Map<String, _i5.ForexModel>>);

  @override
  void connectWebSocket(List<String>? symbols) => super.noSuchMethod(
        Invocation.method(
          #connectWebSocket,
          [symbols],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.FutureOr<Map<String, _i5.ForexModel>> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _i6.Future<Map<String, _i5.ForexModel>>.value(
            <String, _i5.ForexModel>{}),
      ) as _i6.FutureOr<Map<String, _i5.ForexModel>>);

  @override
  _i6.Future<void> connect(List<String>? symbols) => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [symbols],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> connectOnResume(List<String>? symbols) =>
      (super.noSuchMethod(
        Invocation.method(
          #connectOnResume,
          [symbols],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void subscribeToSymbol(String? symbol) => super.noSuchMethod(
        Invocation.method(
          #subscribeToSymbol,
          [symbol],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unsubscribeFromSymbol(String? symbol) => super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromSymbol,
          [symbol],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i7.TradeModel> getTradeHistory(String? symbol) => (super.noSuchMethod(
        Invocation.method(
          #getTradeHistory,
          [symbol],
        ),
        returnValue: <_i7.TradeModel>[],
      ) as List<_i7.TradeModel>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeAppLifecycleState(_i8.AppLifecycleState? state) =>
      super.noSuchMethod(
        Invocation.method(
          #didChangeAppLifecycleState,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenSelf(
    void Function(
      _i2.AsyncValue<Map<String, _i5.ForexModel>>?,
      _i2.AsyncValue<Map<String, _i5.ForexModel>>,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<Map<String, _i5.ForexModel>> update(
    _i6.FutureOr<Map<String, _i5.ForexModel>> Function(
            Map<String, _i5.ForexModel>)?
        cb, {
    _i6.FutureOr<Map<String, _i5.ForexModel>> Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [cb],
          {#onError: onError},
        ),
        returnValue: _i6.Future<Map<String, _i5.ForexModel>>.value(
            <String, _i5.ForexModel>{}),
      ) as _i6.Future<Map<String, _i5.ForexModel>>);

  @override
  bool updateShouldNotify(
    _i2.AsyncValue<Map<String, _i5.ForexModel>>? previous,
    _i2.AsyncValue<Map<String, _i5.ForexModel>>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<bool> didPopRoute() => (super.noSuchMethod(
        Invocation.method(
          #didPopRoute,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  bool handleStartBackGesture(_i9.PredictiveBackEvent? backEvent) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleStartBackGesture,
          [backEvent],
        ),
        returnValue: false,
      ) as bool);

  @override
  void handleUpdateBackGestureProgress(_i9.PredictiveBackEvent? backEvent) =>
      super.noSuchMethod(
        Invocation.method(
          #handleUpdateBackGestureProgress,
          [backEvent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleCommitBackGesture() => super.noSuchMethod(
        Invocation.method(
          #handleCommitBackGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleCancelBackGesture() => super.noSuchMethod(
        Invocation.method(
          #handleCancelBackGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<bool> didPushRoute(String? route) => (super.noSuchMethod(
        Invocation.method(
          #didPushRoute,
          [route],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> didPushRouteInformation(
          _i10.RouteInformation? routeInformation) =>
      (super.noSuchMethod(
        Invocation.method(
          #didPushRouteInformation,
          [routeInformation],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  void didChangeMetrics() => super.noSuchMethod(
        Invocation.method(
          #didChangeMetrics,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeTextScaleFactor() => super.noSuchMethod(
        Invocation.method(
          #didChangeTextScaleFactor,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangePlatformBrightness() => super.noSuchMethod(
        Invocation.method(
          #didChangePlatformBrightness,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeLocales(List<_i8.Locale>? locales) => super.noSuchMethod(
        Invocation.method(
          #didChangeLocales,
          [locales],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeViewFocus(_i8.ViewFocusEvent? event) => super.noSuchMethod(
        Invocation.method(
          #didChangeViewFocus,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i8.AppExitResponse> didRequestAppExit() => (super.noSuchMethod(
        Invocation.method(
          #didRequestAppExit,
          [],
        ),
        returnValue:
            _i6.Future<_i8.AppExitResponse>.value(_i8.AppExitResponse.exit),
      ) as _i6.Future<_i8.AppExitResponse>);

  @override
  void didHaveMemoryPressure() => super.noSuchMethod(
        Invocation.method(
          #didHaveMemoryPressure,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeAccessibilityFeatures() => super.noSuchMethod(
        Invocation.method(
          #didChangeAccessibilityFeatures,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
